package org.bcdns.credential;

import cn.bif.api.BIFSDK;
import cn.bif.common.JsonUtils;
import cn.bif.common.ToBaseUnit;
import cn.bif.exception.SdkError;
import cn.bif.model.request.*;
import cn.bif.model.response.*;
import cn.bif.model.response.result.BIFContractCallResult;
import cn.bif.model.response.result.BIFContractInvokeResult;
import cn.bif.module.contract.BIFContractService;
import cn.bif.module.encryption.model.KeyType;
import cn.hutool.core.collection.ListUtil;
import cn.hutool.core.date.DateUtil;
import cn.hutool.core.map.MapUtil;
import cn.hutool.core.util.HexUtil;
import cn.hutool.core.util.ObjectUtil;
import cn.hutool.core.util.StrUtil;
import cn.hutool.crypto.ECKeyUtil;
import com.alibaba.fastjson.JSONObject;
import com.alipay.antchain.bridge.commons.bcdns.*;
import com.alipay.antchain.bridge.commons.bcdns.utils.BIDHelper;
import com.alipay.antchain.bridge.commons.bcdns.utils.CrossChainCertificateUtil;
import com.alipay.antchain.bridge.commons.core.base.BIDInfoObjectIdentity;
import com.alipay.antchain.bridge.commons.core.base.CrossChainDomain;
import com.alipay.antchain.bridge.commons.core.base.ObjectIdentity;
import com.alipay.antchain.bridge.commons.core.base.ObjectIdentityType;
import com.alipay.antchain.bridge.commons.core.ptc.PTCTrustRoot;
import com.alipay.antchain.bridge.commons.core.ptc.PTCVerifyAnchor;
import com.alipay.antchain.bridge.commons.core.ptc.ThirdPartyBlockchainTrustAnchorV1;
import com.alipay.antchain.bridge.commons.utils.crypto.HashAlgoEnum;
import com.alipay.antchain.bridge.commons.utils.crypto.SignAlgoEnum;
import org.bcdns.credential.biz.VcExternalBiz;
import org.bcdns.credential.common.utils.Tools;
import org.bcdns.credential.dto.req.VcPTCTrustRootReqDto;
import org.bcdns.credential.dto.req.VcTpBtaReqDto;
import org.bcdns.credential.dto.resp.DataResp;
import org.bcdns.credential.dto.resp.VcPTCTrustRootRespDto;
import org.bcdns.credential.dto.resp.VcTpBtaRespDto;
import org.bcdns.credential.enums.ExceptionEnum;
import org.bcdns.credential.exception.APIException;
import org.bcdns.credential.model.VcAuditDomain;
import org.bcdns.credential.model.VcRecordDomain;
import org.bcdns.credential.service.VcAuditService;
import org.bcdns.credential.service.VcRecordService;
import org.bouncycastle.jcajce.provider.asymmetric.edec.BCEdDSAPublicKey;
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.reactive.GenericReactiveTransaction;

import java.math.BigInteger;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.interfaces.ECPublicKey;
import java.util.*;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.notNull;
import static org.mockito.Mockito.*;

@ActiveProfiles("test")
@RunWith(SpringRunner.class)
@Sql(scripts = {"classpath:init.sql"}, executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD)
@Sql(scripts = {"classpath:drop.sql"}, executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)
@SpringBootTest(classes = CredentialApplication.class)
public class PTCTrustRootTest {

    private static final String sdkUrl = "http://test.bifcore.bitfactory.cn";

    private static final String senderAddress = "did:bid:efYqASNNKhotQLdJH9N83jniXJyinmDX";

    private static final String senderPrivateKey = "priSPKkeE5bJuRdsbBeYRMHR6vF6M6PJV97jbwAHomVQodn3x3";

    private static final String ptcManagerContract = "did:bid:efkbC2VASBcwTPyhqaEY64Zs1j7RCQ3";

    private static final String ptcTrustRootContract = "did:bid:efQR6mQA7PwkmG9JTVoAeSc45tYk3SyK";

    private static final String ptcManagerContractByteCode = "60806040526000339050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35061103b806100b46000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063142e154214610088578063165caccc146100f15780632d16473f146101d3578063597239a714610282578063715018a6146103035780638da5cb5b1461031a578063f2fde38b14610371575b600080fd5b34801561009457600080fd5b506100ef600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506103b4565b005b3480156100fd57600080fd5b50610158600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610674565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561019857808201518184015260208101905061017d565b50505050905090810190601f1680156101c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101df57600080fd5b50610280600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610784565b005b34801561028e57600080fd5b506102e9600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610b04565b604051808215151515815260200191505060405180910390f35b34801561030f57600080fd5b50610318610b89565b005b34801561032657600080fd5b5061032f610cf2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561037d57600080fd5b506103b2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d1b565b005b3373ffffffffffffffffffffffffffffffffffffffff166103d3610cf2565b73ffffffffffffffffffffffffffffffffffffffff1614151561045e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6001816040518082805190602001908083835b6020831015156104965780518252602082019150602081019050602083039250610471565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160009054906101000a900460ff16151561054e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f636572746966696361746520686173206265656e207265766f6b65640000000081525060200191505060405180910390fd5b60006001826040518082805190602001908083835b6020831015156105885780518252602082019150602081019050602083039250610563565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160006101000a81548160ff0219169083151502179055507fe565ddda66e7404ad75b2e7d05d14eac00057e873ea7d6e5439d67b999ba255c816040518080602001828103825283818151815260200191508051906020019080838360005b8381101561063757808201518184015260208101905061061c565b50505050905090810190601f1680156106645780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b60606001826040518082805190602001908083835b6020831015156106ae5780518252602082019150602081019050602083039250610689565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107785780601f1061074d57610100808354040283529160200191610778565b820191906000526020600020905b81548152906001019060200180831161075b57829003601f168201915b50505050509050919050565b61078c610f4e565b3373ffffffffffffffffffffffffffffffffffffffff166107ab610cf2565b73ffffffffffffffffffffffffffffffffffffffff16141515610836576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60006001846040518082805190602001908083835b602083101515610870578051825260208201915060208101905060208303925061084b565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001805460018160011615610100020316600290049050141515610930576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f636572746966696361746520686173206265656e20726567697374657265640081525060200191505060405180910390fd5b8181600001819052506001816020019015159081151581525050806001846040518082805190602001908083835b602083101515610983578051825260208201915060208101905060208303925061095e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060008201518160000190805190602001906109d2929190610f6a565b5060208201518160010160006101000a81548160ff0219169083151502179055509050507f8a65131a45e6179fb02f1b6dcd89d4c8316826486f47d467822161f57472ce368383604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610a5d578082015181840152602081019050610a42565b50505050905090810190601f168015610a8a5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015610ac3578082015181840152602081019050610aa8565b50505050905090810190601f168015610af05780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1505050565b60006001826040518082805190602001908083835b602083101515610b3e5780518252602082019150602081019050602083039250610b19565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160009054906101000a900460ff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff16610ba8610cf2565b73ffffffffffffffffffffffffffffffffffffffff16141515610c33576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff16610d3a610cf2565b73ffffffffffffffffffffffffffffffffffffffff16141515610dc5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610e90576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6040805190810160405280606081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610fab57805160ff1916838001178555610fd9565b82800160010185558215610fd9579182015b82811115610fd8578251825591602001919060010190610fbd565b5b509050610fe69190610fea565b5090565b61100c91905b80821115611008576000816000905550600101610ff0565b5090565b905600a165627a7a723058203e501d03a2a58eeeb68739e56ac7991c8ea19b1c6701369bf5cc02e6a852adea0029";

    private static final String ptcTrustRootContractByteCode = "60806040526000339050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506110c1806100b46000396000f30060806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630b482d4e14610093578063106ed28f1461013d5780632b065db8146101b45780635cb1204e146101e5578063715018a61461022e5780638da5cb5b14610245578063b53921481461029c578063f2fde38b14610313575b600080fd5b34801561009f57600080fd5b506100c26004803603810190808035600019169060200190929190505050610356565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101025780820151818401526020810190506100e7565b50505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014957600080fd5b506101b26004803603810190808035600019169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610416565b005b3480156101c057600080fd5b506101e36004803603810190808035600019169060200190929190505050610714565b005b3480156101f157600080fd5b5061021460048036038101908080356000191690602001909291905050506108d7565b604051808215151515815260200191505060405180910390f35b34801561023a57600080fd5b5061024361090c565b005b34801561025157600080fd5b5061025a610a75565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102a857600080fd5b506103116004803603810190808035600019169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610a9e565b005b34801561031f57600080fd5b50610354600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d21565b005b60606001600083600019166000191681526020019081526020016000206000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561040a5780601f106103df5761010080835404028352916020019161040a565b820191906000526020600020905b8154815290600101906020018083116103ed57829003601f168201915b50505050509050919050565b3373ffffffffffffffffffffffffffffffffffffffff16610435610a75565b73ffffffffffffffffffffffffffffffffffffffff161415156104c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600060016000846000191660001916815260200190815260200160002060000180546001816001161561010002031660029004905014151515610591576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f7074635472757374526f6f7420686173206e6f74206265656e2072656769737481526020017f657265640000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60016000836000191660001916815260200190815260200160002060010160009054906101000a900460ff161515610631576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f5054435472757374526f6f7420686173206265656e207265766f6b656400000081525060200191505060405180910390fd5b806001600084600019166000191681526020019081526020016000206000019080519060200190610663929190610f54565b507fefb57aa461320f3df39d600e376189a104d295e9a75dc4d3cb4c3a3193fef1c8828260405180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b838110156106d55780820151818401526020810190506106ba565b50505050905090810190601f1680156107025780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b3373ffffffffffffffffffffffffffffffffffffffff16610733610a75565b73ffffffffffffffffffffffffffffffffffffffff161415156107be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60016000826000191660001916815260200190815260200160002060010160009054906101000a900460ff16151561085e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f5054435472757374526f6f7420686173206265656e207265766f6b656400000081525060200191505060405180910390fd5b600060016000836000191660001916815260200190815260200160002060010160006101000a81548160ff0219169083151502179055507f5cffe022e2d17bd39a1e1a570e64f967e9bfdf808d2073763126a8182fdb3def8160405180826000191660001916815260200191505060405180910390a150565b600060016000836000191660001916815260200190815260200160002060010160009054906101000a900460ff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff1661092b610a75565b73ffffffffffffffffffffffffffffffffffffffff161415156109b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610aa6610fd4565b3373ffffffffffffffffffffffffffffffffffffffff16610ac5610a75565b73ffffffffffffffffffffffffffffffffffffffff16141515610b50576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6000600160008560001916600019168152602001908152602001600020600001805460018160011615610100020316600290049050141515610bfa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f7074635472757374526f6f7420686173206265656e207265676973746572656481525060200191505060405180910390fd5b8181600001819052506001816020019015159081151581525050806001600085600019166000191681526020019081526020016000206000820151816000019080519060200190610c4c929190610ff0565b5060208201518160010160006101000a81548160ff0219169083151502179055509050507f262168c910ebafa646981d4054497dcc20d953447bcdea2a2546fb5843e19efd838360405180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610ce1578082015181840152602081019050610cc6565b50505050905090810190601f168015610d0e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1505050565b3373ffffffffffffffffffffffffffffffffffffffff16610d40610a75565b73ffffffffffffffffffffffffffffffffffffffff16141515610dcb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610e96576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610f9557805160ff1916838001178555610fc3565b82800160010185558215610fc3579182015b82811115610fc2578251825591602001919060010190610fa7565b5b509050610fd09190611070565b5090565b6040805190810160405280606081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061103157805160ff191683800117855561105f565b8280016001018555821561105f579182015b8281111561105e578251825591602001919060010190611043565b5b50905061106c9190611070565b5090565b61109291905b8082111561108e576000816000905550600101611076565b5090565b905600a165627a7a72305820cbdd77794758cd758c9f384a89ea29b2a7e59f7dda0f25ba615caf660c812e070029";

    private static final String ADD_CERTIFICATE_BY_VCID
            = "{\"function\":\"addCertificate(string,bytes)\",\"args\":\"'{}','{}'\"}";

    private static final String GET_CERT_BY_ID
            = "{\"function\":\"getCertById(string)\",\"args\":\"'{}'\",\"return\":\"returns(bytes)\"}";

    private static final String ADD_PTCTRUSTROOT_BY_PTCOID_TEMPLATE
            = "{\"function\":\"addPTCTR(bytes32,bytes)\",\"args\":\"'{}','{}'\"}";

    private static final String GET_PTCTRUSTROOT_BY_ID
            = "{\"function\":\"getPTCTrustRootById(bytes32)\",\"args\":\"'{}'\",\"return\":\"returns(bytes)\"}";

    private static final String PTC_CALL_GET_CERT_BY_ID_TEMPLATE
            = "{\"function\":\"getCertById(string)\",\"args\":\"'{}'\",\"return\":\"returns(bytes)\"}";

    private static BIFSDK sdk;

    @Autowired
    private VcExternalBiz biz;

    private PTCTrustRoot ptcTrustRoot;

    private static MockedStatic mockStaticObj = null;

    @BeforeClass
    public static void setUp() throws Exception {
        sdk = BIFSDK.getInstance(sdkUrl);
    }

    @AfterClass
    public static void afterClass() throws Exception {
        if (ObjectUtil.isNotNull(mockStaticObj)) {
            mockStaticObj.close();
        }
    }

    // ---------------------------------test deploy contract---------------------------------

    @Test
    public void testDeployPTCManagerContract() {
        // 初始化参数
//        String payload = "60806040526000339050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35061103b806100b46000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063142e154214610088578063165caccc146100f15780632d16473f146101d3578063597239a714610282578063715018a6146103035780638da5cb5b1461031a578063f2fde38b14610371575b600080fd5b34801561009457600080fd5b506100ef600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506103b4565b005b3480156100fd57600080fd5b50610158600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610674565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561019857808201518184015260208101905061017d565b50505050905090810190601f1680156101c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101df57600080fd5b50610280600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610784565b005b34801561028e57600080fd5b506102e9600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610b04565b604051808215151515815260200191505060405180910390f35b34801561030f57600080fd5b50610318610b89565b005b34801561032657600080fd5b5061032f610cf2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561037d57600080fd5b506103b2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d1b565b005b3373ffffffffffffffffffffffffffffffffffffffff166103d3610cf2565b73ffffffffffffffffffffffffffffffffffffffff1614151561045e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6001816040518082805190602001908083835b6020831015156104965780518252602082019150602081019050602083039250610471565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160009054906101000a900460ff16151561054e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f636572746966696361746520686173206265656e207265766f6b65640000000081525060200191505060405180910390fd5b60006001826040518082805190602001908083835b6020831015156105885780518252602082019150602081019050602083039250610563565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160006101000a81548160ff0219169083151502179055507fe565ddda66e7404ad75b2e7d05d14eac00057e873ea7d6e5439d67b999ba255c816040518080602001828103825283818151815260200191508051906020019080838360005b8381101561063757808201518184015260208101905061061c565b50505050905090810190601f1680156106645780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b60606001826040518082805190602001908083835b6020831015156106ae5780518252602082019150602081019050602083039250610689565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107785780601f1061074d57610100808354040283529160200191610778565b820191906000526020600020905b81548152906001019060200180831161075b57829003601f168201915b50505050509050919050565b61078c610f4e565b3373ffffffffffffffffffffffffffffffffffffffff166107ab610cf2565b73ffffffffffffffffffffffffffffffffffffffff16141515610836576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60006001846040518082805190602001908083835b602083101515610870578051825260208201915060208101905060208303925061084b565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001805460018160011615610100020316600290049050141515610930576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f636572746966696361746520686173206265656e20726567697374657265640081525060200191505060405180910390fd5b8181600001819052506001816020019015159081151581525050806001846040518082805190602001908083835b602083101515610983578051825260208201915060208101905060208303925061095e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060008201518160000190805190602001906109d2929190610f6a565b5060208201518160010160006101000a81548160ff0219169083151502179055509050507f8a65131a45e6179fb02f1b6dcd89d4c8316826486f47d467822161f57472ce368383604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610a5d578082015181840152602081019050610a42565b50505050905090810190601f168015610a8a5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015610ac3578082015181840152602081019050610aa8565b50505050905090810190601f168015610af05780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1505050565b60006001826040518082805190602001908083835b602083101515610b3e5780518252602082019150602081019050602083039250610b19565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160009054906101000a900460ff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff16610ba8610cf2565b73ffffffffffffffffffffffffffffffffffffffff16141515610c33576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff16610d3a610cf2565b73ffffffffffffffffffffffffffffffffffffffff16141515610dc5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610e90576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6040805190810160405280606081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610fab57805160ff1916838001178555610fd9565b82800160010185558215610fd9579182015b82811115610fd8578251825591602001919060010190610fbd565b5b509050610fe69190610fea565b5090565b61100c91905b80821115611008576000816000905550600101610ff0565b5090565b905600a165627a7a723058203e501d03a2a58eeeb68739e56ac7991c8ea19b1c6701369bf5cc02e6a852adea0029";
        Long initBalance = ToBaseUnit.ToUGas("0.01");
        BIFContractCreateRequest request = new BIFContractCreateRequest();
        request.setSenderAddress(senderAddress);
        request.setPrivateKey(senderPrivateKey);
        request.setInitBalance(initBalance);
        request.setPayload(ptcManagerContractByteCode);
        request.setRemarks("create contract");
        request.setType(1);
        request.setFeeLimit(2000000000L);
//        request.setDomainId(20);
//        request.setGasPrice(100L);

        // 调用bifContractCreate接口
        BIFContractCreateResponse response = sdk.getBIFContractService().contractCreate(request);
        if (response.getErrorCode() == 0) {
            System.out.println(JsonUtils.toJSONString(response.getResult()));
        } else {
            System.out.println(JsonUtils.toJSONString(response));
        }
    }

    @Test
    public void testDeployPTCTrustRootManagerContract() {
        // 初始化参数
//        String payload = "60806040526000339050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506110c1806100b46000396000f30060806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630b482d4e14610093578063106ed28f1461013d5780632b065db8146101b45780635cb1204e146101e5578063715018a61461022e5780638da5cb5b14610245578063b53921481461029c578063f2fde38b14610313575b600080fd5b34801561009f57600080fd5b506100c26004803603810190808035600019169060200190929190505050610356565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101025780820151818401526020810190506100e7565b50505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014957600080fd5b506101b26004803603810190808035600019169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610416565b005b3480156101c057600080fd5b506101e36004803603810190808035600019169060200190929190505050610714565b005b3480156101f157600080fd5b5061021460048036038101908080356000191690602001909291905050506108d7565b604051808215151515815260200191505060405180910390f35b34801561023a57600080fd5b5061024361090c565b005b34801561025157600080fd5b5061025a610a75565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102a857600080fd5b506103116004803603810190808035600019169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610a9e565b005b34801561031f57600080fd5b50610354600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d21565b005b60606001600083600019166000191681526020019081526020016000206000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561040a5780601f106103df5761010080835404028352916020019161040a565b820191906000526020600020905b8154815290600101906020018083116103ed57829003601f168201915b50505050509050919050565b3373ffffffffffffffffffffffffffffffffffffffff16610435610a75565b73ffffffffffffffffffffffffffffffffffffffff161415156104c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600060016000846000191660001916815260200190815260200160002060000180546001816001161561010002031660029004905014151515610591576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f7074635472757374526f6f7420686173206e6f74206265656e2072656769737481526020017f657265640000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60016000836000191660001916815260200190815260200160002060010160009054906101000a900460ff161515610631576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f5054435472757374526f6f7420686173206265656e207265766f6b656400000081525060200191505060405180910390fd5b806001600084600019166000191681526020019081526020016000206000019080519060200190610663929190610f54565b507fefb57aa461320f3df39d600e376189a104d295e9a75dc4d3cb4c3a3193fef1c8828260405180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b838110156106d55780820151818401526020810190506106ba565b50505050905090810190601f1680156107025780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b3373ffffffffffffffffffffffffffffffffffffffff16610733610a75565b73ffffffffffffffffffffffffffffffffffffffff161415156107be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60016000826000191660001916815260200190815260200160002060010160009054906101000a900460ff16151561085e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f5054435472757374526f6f7420686173206265656e207265766f6b656400000081525060200191505060405180910390fd5b600060016000836000191660001916815260200190815260200160002060010160006101000a81548160ff0219169083151502179055507f5cffe022e2d17bd39a1e1a570e64f967e9bfdf808d2073763126a8182fdb3def8160405180826000191660001916815260200191505060405180910390a150565b600060016000836000191660001916815260200190815260200160002060010160009054906101000a900460ff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff1661092b610a75565b73ffffffffffffffffffffffffffffffffffffffff161415156109b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610aa6610fd4565b3373ffffffffffffffffffffffffffffffffffffffff16610ac5610a75565b73ffffffffffffffffffffffffffffffffffffffff16141515610b50576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6000600160008560001916600019168152602001908152602001600020600001805460018160011615610100020316600290049050141515610bfa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f7074635472757374526f6f7420686173206265656e207265676973746572656481525060200191505060405180910390fd5b8181600001819052506001816020019015159081151581525050806001600085600019166000191681526020019081526020016000206000820151816000019080519060200190610c4c929190610ff0565b5060208201518160010160006101000a81548160ff0219169083151502179055509050507f262168c910ebafa646981d4054497dcc20d953447bcdea2a2546fb5843e19efd838360405180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610ce1578082015181840152602081019050610cc6565b50505050905090810190601f168015610d0e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1505050565b3373ffffffffffffffffffffffffffffffffffffffff16610d40610a75565b73ffffffffffffffffffffffffffffffffffffffff16141515610dcb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610e96576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610f9557805160ff1916838001178555610fc3565b82800160010185558215610fc3579182015b82811115610fc2578251825591602001919060010190610fa7565b5b509050610fd09190611070565b5090565b6040805190810160405280606081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061103157805160ff191683800117855561105f565b8280016001018555821561105f579182015b8281111561105e578251825591602001919060010190611043565b5b50905061106c9190611070565b5090565b61109291905b8082111561108e576000816000905550600101611076565b5090565b905600a165627a7a72305820cbdd77794758cd758c9f384a89ea29b2a7e59f7dda0f25ba615caf660c812e070029";
        Long initBalance = ToBaseUnit.ToUGas("0.01");
        BIFContractCreateRequest request = new BIFContractCreateRequest();
        request.setSenderAddress(senderAddress);
        request.setPrivateKey(senderPrivateKey);
        request.setInitBalance(initBalance);
        request.setPayload(ptcTrustRootContractByteCode);
        request.setRemarks("create contract");
        request.setType(1);
        request.setFeeLimit(2000000000L);
//        request.setDomainId(20);
//        request.setGasPrice(100L);

        // 调用bifContractCreate接口
        BIFContractCreateResponse response = sdk.getBIFContractService().contractCreate(request);
        if (response.getErrorCode() == 0) {
            System.out.println(JsonUtils.toJSONString(response.getResult()));
        } else {
            System.out.println(JsonUtils.toJSONString(response));
        }
    }

    @Test
    public void testQueryContractAddress() {
        // 部署合约的txhash查询合约地址
        String hash = "b6d7a1f5d5fe1ae5ff3520c96972534013c36372ecb85f897a8f34aea427eae1";
        BIFContractGetAddressRequest request = new BIFContractGetAddressRequest();
        request.setHash(hash);
        request.setDomainId(20);

        // Call getAddress
        BIFContractGetAddressResponse response = sdk.getBIFContractService().getContractAddress(request);
        if (response.getErrorCode() == 0) {
            System.out.println(JsonUtils.toJSONString(response.getResult()));
        } else {
            System.out.println(JsonUtils.toJSONString(response));
        }
    }

    @Test
    public void getContractInfo() {
        // 根据BIF合约地址ContractAddress查合约详情
        BIFContractGetInfoRequest request = new BIFContractGetInfoRequest();
        request.setContractAddress(ptcManagerContract);
        request.setDomainId(20);

        // Call getContractInfo
        BIFContractGetInfoResponse response = sdk.getBIFContractService().getContractInfo(request);
        if (response.getErrorCode() == 0) {
            System.out.println(JsonUtils.toJSONString(response.getResult()));
        } else {
            System.out.println(JsonUtils.toJSONString(response));
        }
    }

    // ---------------------------------test add ptcTrustRoot---------------------------------

    private static final String PTC_CERT = "-----BEGIN PROOF TRANSFORMATION COMPONENT CERTIFICATE-----\n" +
            "AAD4AQAAAAABAAAAMQEADAAAAGFudGNoYWluLXB0YwIAAQAAAAIDAGsAAAAAAGUA\n" +
            "AAAAAAEAAAAAAQBYAAAAMFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEC4Wuvhr7FFHJ\n" +
            "4Fqa3HoxeuP0rzMJr3PBFI/ng5gxWxhbJcU5rwfdg4mcuJzlpjWYe6Oi4oifOpb7\n" +
            "8usUKQk/wwQACAAAAL33wmYAAAAABQAIAAAAPSukaAAAAAAGAKAAAAAAAJoAAAAA\n" +
            "AAMAAAAxLjABAA0AAABjb21taXR0ZWUtcHRjAgABAAAAAQMAawAAAAAAZQAAAAAA\n" +
            "AQAAAAABAFgAAAAwVjAQBgcqhkjOPQIBBgUrgQQACgNCAAQLha6+GvsUUcngWprc\n" +
            "ejF64/SvMwmvc8EUj+eDmDFbGFslxTmvB92DiZy4nOWmNZh7o6LiiJ86lvvy6xQp\n" +
            "CT/DBAAAAAAABwCfAAAAAACZAAAAAAAKAAAAS0VDQ0FLLTI1NgEAIAAAAFsd3DdS\n" +
            "GQUHCKafwbD5hJ70Y7IdNtrjnH10OVZoQvxzAgAWAAAAS2VjY2FrMjU2V2l0aFNl\n" +
            "Y3AyNTZrMQMAQQAAAPi7je8dWPyFAtNduzBIwjYKHpspsxzZIcvjAwPnirHQVsdu\n" +
            "X2H1nxiTZ7LU5u0WUAZskpd3tDQoTzLUC6ol47UB\n" +
            "-----END PROOF TRANSFORMATION COMPONENT CERTIFICATE-----\n";

    private static final String ptcPrivateKey = "-----BEGIN EC PRIVATE KEY-----\n" +
            "MHQCAQEEIC0cCFjdnZIsj2U3BuCLsuXnE6+FN0K+VwUD74rwY5WsoAcGBSuBBAAK\n" +
            "oUQDQgAEC4Wuvhr7FFHJ4Fqa3HoxeuP0rzMJr3PBFI/ng5gxWxhbJcU5rwfdg4mc\n" +
            "uJzlpjWYe6Oi4oifOpb78usUKQk/ww==\n" +
            "-----END EC PRIVATE KEY-----\n";

    @Test
    public void testAddPTCCertificate() {
        AbstractCrossChainCertificate ptcCertObj = CrossChainCertificateUtil.readCrossChainCertificateFromPem(PTC_CERT.getBytes());
        Long amount = 0L;
        String input = StrUtil.format(
                ADD_CERTIFICATE_BY_VCID,
                ptcCertObj.getId(), "0x" + HexUtil.encodeHexStr(ptcCertObj.getEncodedToSign())
        );
        BIFContractInvokeRequest request = new BIFContractInvokeRequest();
        request.setSenderAddress(senderAddress);
        request.setPrivateKey(senderPrivateKey);
        request.setContractAddress(ptcManagerContract);
        request.setBIFAmount(amount);
        request.setRemarks("contract invoke");
        request.setDomainId(0);
        request.setInput(input);
        request.setGasPrice(1L);

        // invoke Transaction
        BIFContractInvokeResponse response = sdk.getBIFContractService().contractInvoke(request);
        if (response.getErrorCode() == 0) {
            System.out.println(JsonUtils.toJSONString(response.getResult()));
        } else {
            System.out.println(JsonUtils.toJSONString(response));
        }
    }

    @Test
    public void testCheckTransaction() {
        BIFTransactionGetInfoRequest request = new BIFTransactionGetInfoRequest();
        request.setHash("870916dffe795df56be8874082e545cf9ee4ffe95b31c7f0eb14f6c92f400cad");
        request.setDomainId(20);

        // call getTransactionInfo
        BIFTransactionGetInfoResponse response = sdk.getBIFTransactionService().getTransactionInfo(request);
        if (response.getErrorCode() == 0) {
            System.out.println(JsonUtils.toJSONString(response.getResult()));
        } else {
            System.out.println(JsonUtils.toJSONString(response));
        }
    }

    @Test
    public void testQueryPTCCertificate() {
        AbstractCrossChainCertificate ptcCertObj = CrossChainCertificateUtil.readCrossChainCertificateFromPem(PTC_CERT.getBytes());

        BIFContractService bifContractService = sdk.getBIFContractService();
        BIFContractCallRequest bifContractCallRequest = new BIFContractCallRequest();
        bifContractCallRequest.setDomainId(20);
        bifContractCallRequest.setContractAddress(ptcManagerContract);
        bifContractCallRequest.setGasPrice(1L);
        bifContractCallRequest.setInput(
                StrUtil.format(
                        GET_CERT_BY_ID, ptcCertObj.getId()
                )
        );
        BIFContractCallResponse callResp = bifContractService.contractQuery(bifContractCallRequest);
        if (ExceptionEnum.SUCCESS.getErrorCode().equals(callResp.getErrorCode())) {
            if (JSONObject.parseObject(JSONObject.toJSONString(callResp.getResult().getQueryRets().get(0))).getJSONObject("result") != null) {
                String resp = decodeResultFromResponse(callResp);
                // recover certificate
                AbstractCrossChainCertificate certFromCont = CrossChainCertificateFactory.createCrossChainCertificate(HexUtil.decodeHex(resp)); // decodeResultFromResponse(callResp) maybe has remove '0x'
                PublicKey publicKey = CrossChainCertificateUtil.getPublicKeyFromCrossChainCertificate(certFromCont);
            } else {
                System.out.println("query failed, error:2");
            }
        } else {
            System.out.println("query failed, error:1");
        }
    }

    // mock ptcTrustRoot
    public void newPtcTrustRoot() {
        AbstractCrossChainCertificate ptcCertObj = CrossChainCertificateUtil.readCrossChainCertificateFromPem(PTC_CERT.getBytes());
        PrivateKey ptcPrivateKeyObj = SignAlgoEnum.KECCAK256_WITH_SECP256K1.getSigner().readPemPrivateKey(ptcPrivateKey.getBytes());
        String bcdnsDomainSpace = ".com";

        // build it first
        ptcTrustRoot = PTCTrustRoot.builder()
                .ptcCrossChainCert(ptcCertObj)
                .networkInfo("{}".getBytes())
                .issuerBcdnsDomainSpace(new CrossChainDomain(bcdnsDomainSpace))
                .sigAlgo(SignAlgoEnum.KECCAK256_WITH_SECP256K1)
                .verifyAnchorMap(MapUtil.builder(
                        BigInteger.ZERO,
                        new PTCVerifyAnchor(
                                BigInteger.ZERO,
                                "{}".getBytes()
                        )
                ).build())
                .build();

        // sign it with ptc private key which applied PTC certificate
        ptcTrustRoot.sign(ptcPrivateKeyObj);
    }

    // verify ptcTrustRoot's signature
    public void verifySignature(PTCTrustRoot ptcTrustRootReq) {
        AbstractCrossChainCertificate ptcCertObj = CrossChainCertificateUtil.readCrossChainCertificateFromPem(PTC_CERT.getBytes());
        AbstractCrossChainCertificate certRecover = queryCertificate(ptcCertObj.getId());
        if (Tools.isNull(certRecover)) {
            System.out.println("certRecover is null");
        }
        if (ptcTrustRoot.getSigAlgo().getSigner().verify(
                CrossChainCertificateUtil.getPublicKeyFromCrossChainCertificate(certRecover),
                ptcTrustRoot.getEncodedToSign(), //data
                ptcTrustRoot.getSig()
        )) {
            System.out.println("Signature verified");
        } else {
            System.out.println("signature verification failed");
        }
        Assert.assertNotNull(ptcTrustRoot.getSig());
    }

    public AbstractCrossChainCertificate queryCertificate(String vcId) {
        BIFContractService bifContractService = sdk.getBIFContractService();
        BIFContractCallRequest bifContractCallRequest = new BIFContractCallRequest();
        bifContractCallRequest.setDomainId(20);
        bifContractCallRequest.setContractAddress(ptcManagerContract);
        bifContractCallRequest.setGasPrice(1L);
        bifContractCallRequest.setInput(
                StrUtil.format(
                        GET_CERT_BY_ID, vcId
                )
        );
        BIFContractCallResponse callResp = bifContractService.contractQuery(bifContractCallRequest);
        if (ExceptionEnum.SUCCESS.getErrorCode().equals(callResp.getErrorCode())) {
            if (JSONObject.parseObject(JSONObject.toJSONString(callResp.getResult().getQueryRets().get(0))).getJSONObject("result") != null) {
                String resp = decodeResultFromResponse(callResp);
                return CrossChainCertificateFactory.createCrossChainCertificate(HexUtil.decodeHex(resp));
            } else {
                System.out.println("query failed, error:2");
            }
        } else {
            System.out.println("query failed, error:1");
        }
        return null;
    }

    @Test
    public void testAddPTCTrustRoot() {
        newPtcTrustRoot();
        verifySignature(ptcTrustRoot);
        AbstractCrossChainCertificate ptcCertObj = CrossChainCertificateUtil.readCrossChainCertificateFromPem(PTC_CERT.getBytes());
        String input = StrUtil.format(
                ADD_PTCTRUSTROOT_BY_PTCOID_TEMPLATE,
                HexUtil.encodeHexStr(HashAlgoEnum.KECCAK_256.hash(ptcTrustRoot.encode())), "0x" + HexUtil.encodeHexStr(ptcTrustRoot.getEncodedToSign())
        );
        BIFContractInvokeRequest request = new BIFContractInvokeRequest();
        request.setSenderAddress(senderAddress);
        request.setPrivateKey(senderPrivateKey);
        request.setContractAddress(ptcTrustRootContract);
        Long amount = 0L;
        request.setBIFAmount(amount);
        request.setRemarks("contract invoke");
        request.setDomainId(0);
        request.setInput(input);
        request.setGasPrice(1L);

        // 调用 bifContractInvoke 接口
        BIFContractInvokeResponse response = sdk.getBIFContractService().contractInvoke(request);
        if (response.getErrorCode() == 0) {
            System.out.println(JsonUtils.toJSONString(response.getResult()));
        } else {
            System.out.println(JsonUtils.toJSONString(response));
        }

        // verify if ptcTrustRoot has been uploaded in contract
        queryPTCTrustRoot();
    }

    public void queryPTCTrustRoot() {
        // check if PTCTrustRoot has been registered
        BIFContractCallRequest bifContractCallRequest = new BIFContractCallRequest();
        bifContractCallRequest.setInput(
                StrUtil.format(
                        GET_PTCTRUSTROOT_BY_ID, HexUtil.encodeHexStr(HashAlgoEnum.KECCAK_256.hash(ptcTrustRoot.encode()))
                )
        );
        bifContractCallRequest.setContractAddress(ptcTrustRootContract);
        bifContractCallRequest.setGasPrice(1L);
        BIFContractCallResponse callResp = sdk.getBIFContractService().contractQuery(bifContractCallRequest);
        System.out.println(callResp.getResult().getQueryRets().get(0));
        if (0 != callResp.getErrorCode()) {
            throw new APIException(
                    ExceptionEnum.REGISTER_PTCTRUSTROOT_ERROR,
                    StrUtil.format(
                            "failed to query PTCTTrustRoot by ptcOid to BIF chain ( err_code: {}, err_msg: {} )",
                            callResp.getErrorCode(), callResp.getErrorDesc()
                    )
            );
        }
    }

    private String decodeResultFromResponse(BIFContractCallResponse response) {
        Map<String, Map<String, String>> resMap = (Map<String, Map<String, String>>) (response.getResult().getQueryRets().get(0));
        String res = resMap.get("result").get("data").trim();
        System.out.println("decodeResultFromResponse\n" + res);
        res = StrUtil.removeSuffix(
                StrUtil.removePrefix(res, "[").trim(),
                "]"
        ).trim();
        if (HexUtil.isHexNumber(res)) {
            res = StrUtil.removePrefix(res.trim(), "0x");
        }
        return res;
    }

    /* Mock Contracts interactivity */
    @Test
    public void testAddPTCTrustRootV1() {
        newPtcTrustRoot();
        VcPTCTrustRootReqDto reqDto = new VcPTCTrustRootReqDto();
        reqDto.setPtcTrustRoot(ptcTrustRoot.encode());
        BIFSDK mockBifSdk = mock(BIFSDK.class);
        BIFContractService mockBifContractService = mock(BIFContractService.class);
        when(mockBifSdk.getBIFContractService()).thenReturn(mockBifContractService);
        try {
            mockStaticObj = mockStatic(BIFSDK.class);
            when(BIFSDK.getInstance(anyString())).thenReturn(mockBifSdk);
        } catch (Exception e) {
            if (ObjectUtil.isNotNull(mockStaticObj)) {
                mockStaticObj.close();
            }
        }
        BIFContractService bifContractService = mockBifSdk.getBIFContractService();

        // query PTCCertificate and verify addPTCTrustRoot request's signature
        BIFContractCallRequest mockQueryPTCCertificateReq = new BIFContractCallRequest();
        mockQueryPTCCertificateReq.setInput(
                StrUtil.format(
                        GET_CERT_BY_ID, ptcTrustRoot.getPtcCrossChainCert().getId()
                )
        );
        mockQueryPTCCertificateReq.setContractAddress(any());
        BIFContractCallResponse mockQueryPTCCertificateResp = new BIFContractCallResponse();
        BIFContractCallResult mockQueryPTCCertificateResult = new BIFContractCallResult();
        List<Object> list = new ArrayList<Object>();
        Map<String, Object> map = new HashMap<String, Object>();
        Map<String, Object> resultMap = new HashMap<String, Object>();
        resultMap.put("data", "[0000530100000000010000003101000c000000616e74636861696e2d7074630200010000000203006b000000000065000000000001000000000100580000003056301006072a8648ce3d020106052b8104000a034200040b85aebe1afb1451c9e05a9adc7a317ae3f4af3309af73c1148fe78398315b185b25c539af07dd83899cb89ce5a635987ba3a2e2889f3a96fbf2eb1429093fc3040008000000bdf7c266000000000500080000003d2ba468000000000600a000000000009a000000000003000000312e3001000d000000636f6d6d69747465652d7074630200010000000103006b000000000065000000000001000000000100580000003056301006072a8648ce3d020106052b8104000a034200040b85aebe1afb1451c9e05a9adc7a317ae3f4af3309af73c1148fe78398315b185b25c539af07dd83899cb89ce5a635987ba3a2e2889f3a96fbf2eb1429093fc3040000000000]");
        map.put("result", resultMap);
        list.add(map);
        mockQueryPTCCertificateResult.setQueryRets(list);
        mockQueryPTCCertificateResp.buildResponse(SdkError.SUCCESS, mockQueryPTCCertificateResult);
        when(bifContractService.contractQuery(mockQueryPTCCertificateReq)).thenReturn(mockQueryPTCCertificateResp);
        // mock query PTCTrustRoot
        BIFContractCallRequest mockQueryPTCTrustRootReq = new BIFContractCallRequest();
        mockQueryPTCTrustRootReq.setInput(
                StrUtil.format(
                        GET_PTCTRUSTROOT_BY_ID, HashAlgoEnum.KECCAK_256.hash(ptcTrustRoot.encode())
                )
        );
        mockQueryPTCTrustRootReq.setContractAddress(any());
        BIFContractCallResponse mockQueryPTCTrustRootResp = new BIFContractCallResponse();
        BIFContractCallResult mockQueryPTCTrustRootResult = new BIFContractCallResult();
        List<Object> ptcTrustRootList = new ArrayList<Object>();
        Map<String, Object> ptcTrustRootMap = new HashMap<String, Object>();
        Map<String, Object> ptcTrustRootResultMap = new HashMap<String, Object>();
        ptcTrustRootResultMap.put("data", "[0000560200000000040000002e636f6d0100fe0100000000f80100000000010000003101000c000000616e74636861696e2d7074630200010000000203006b000000000065000000000001000000000100580000003056301006072a8648ce3d020106052b8104000a034200040b85aebe1afb1451c9e05a9adc7a317ae3f4af3309af73c1148fe78398315b185b25c539af07dd83899cb89ce5a635987ba3a2e2889f3a96fbf2eb1429093fc3040008000000bdf7c266000000000500080000003d2ba468000000000600a000000000009a000000000003000000312e3001000d000000636f6d6d69747465652d7074630200010000000103006b000000000065000000000001000000000100580000003056301006072a8648ce3d020106052b8104000a034200040b85aebe1afb1451c9e05a9adc7a317ae3f4af3309af73c1148fe78398315b185b25c539af07dd83899cb89ce5a635987ba3a2e2889f3a96fbf2eb1429093fc304000000000007009f00000000009900000000000a0000004b454343414b2d3235360100200000005b1ddc375219050708a69fc1b0f9849ef463b21d36dae39c7d7439566842fc730200160000004b656363616b32353657697468536563703235366b31030041000000f8bb8def1d58fc8502d35dbb3048c2360a1e9b29b31cd921cbe30303e78ab1d056c76e5f61f59f189367b2d4e6ed1650066c929777b434284f32d40baa25e3b5010200020000007b7d03001e00000001000000001500000000000f000000000001000000000100020000007b7d0400160000004b656363616b32353657697468536563703235366b31], desc=, evmcode=0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000025c0000560200000000040000002e636f6d0100fe0100000000f80100000000010000003101000c000000616e74636861696e2d7074630200010000000203006b000000000065000000000001000000000100580000003056301006072a8648ce3d020106052b8104000a034200040b85aebe1afb1451c9e05a9adc7a317ae3f4af3309af73c1148fe78398315b185b25c539af07dd83899cb89ce5a635987ba3a2e2889f3a96fbf2eb1429093fc3040008000000bdf7c266000000000500080000003d2ba468000000000600a000000000009a000000000003000000312e3001000d000000636f6d6d69747465652d7074630200010000000103006b000000000065000000000001000000000100580000003056301006072a8648ce3d020106052b8104000a034200040b85aebe1afb1451c9e05a9adc7a317ae3f4af3309af73c1148fe78398315b185b25c539af07dd83899cb89ce5a635987ba3a2e2889f3a96fbf2eb1429093fc304000000000007009f00000000009900000000000a0000004b454343414b2d3235360100200000005b1ddc375219050708a69fc1b0f9849ef463b21d36dae39c7d7439566842fc730200160000004b656363616b32353657697468536563703235366b31030041000000f8bb8def1d58fc8502d35dbb3048c2360a1e9b29b31cd921cbe30303e78ab1d056c76e5f61f59f189367b2d4e6ed1650066c929777b434284f32d40baa25e3b5010200020000007b7d03001e00000001000000001500000000000f000000000001000000000100020000007b7d0400160000004b656363616b32353657697468536563703235366b3100000000]");
        ptcTrustRootMap.put("result", ptcTrustRootResultMap);
        ptcTrustRootList.add(ptcTrustRootMap);
        mockQueryPTCTrustRootResult.setQueryRets(ptcTrustRootList);
        mockQueryPTCTrustRootResp.buildResponse(SdkError.SUCCESS, mockQueryPTCTrustRootResult);
        when(bifContractService.contractQuery(mockQueryPTCTrustRootReq)).thenReturn(mockQueryPTCTrustRootResp);

        // mock different function parameters return
        when(bifContractService.contractQuery(any(BIFContractCallRequest.class))).thenAnswer(mock -> {
            if (mockQueryPTCCertificateReq.getInput().equals(((BIFContractCallRequest) mock.getArgument(0)).getInput())) {
                return mockQueryPTCCertificateResp;
            }
            if (mockQueryPTCTrustRootReq.getInput().equals(((BIFContractCallRequest) mock.getArgument(0)).getInput())) {
                return mockQueryPTCTrustRootResp;
            }
            return null;
        });

        // mock contractInvoke activity
        BIFContractInvokeResponse mockBifContractInvokeResponse = new BIFContractInvokeResponse();
        BIFContractInvokeResult mockBifContractInvokeResult = new BIFContractInvokeResult();
        mockBifContractInvokeResponse.buildResponse(SdkError.SUCCESS, mockBifContractInvokeResult);
        when(bifContractService.contractInvoke(any())).thenReturn(mockBifContractInvokeResponse);

        // test function: VcExternalBiz.vcAddPTCTrustRoot
        DataResp<VcPTCTrustRootRespDto> dataResp = biz.vcAddPTCTrustRoot(reqDto); // biz的sdkUrl注入不进来
        Assert.assertTrue(dataResp.getData().isStatus());
    }
}
