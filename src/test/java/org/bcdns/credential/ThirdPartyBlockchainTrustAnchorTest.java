package org.bcdns.credential;

import cn.bif.api.BIFSDK;
import cn.bif.common.JsonUtils;
import cn.bif.common.ToBaseUnit;
import cn.bif.exception.SdkError;
import cn.bif.model.request.*;
import cn.bif.model.response.*;
import cn.bif.model.response.result.BIFContractCallResult;
import cn.bif.model.response.result.BIFContractInvokeResult;
import cn.bif.module.contract.BIFContractService;
import cn.hutool.core.codec.Base64;
import cn.hutool.core.util.HexUtil;
import cn.hutool.core.util.ObjectUtil;
import cn.hutool.core.util.StrUtil;
import com.alibaba.fastjson.JSONObject;
import com.alipay.antchain.bridge.commons.bcdns.AbstractCrossChainCertificate;
import com.alipay.antchain.bridge.commons.bcdns.CrossChainCertificateFactory;
import com.alipay.antchain.bridge.commons.bcdns.utils.BIDHelper;
import com.alipay.antchain.bridge.commons.bcdns.utils.CrossChainCertificateUtil;
import com.alipay.antchain.bridge.commons.core.ptc.ThirdPartyBlockchainTrustAnchor;
import com.alipay.antchain.bridge.commons.utils.crypto.SignAlgoEnum;
import com.fasterxml.jackson.databind.ser.Serializers;
import org.bcdns.credential.biz.VcExternalBiz;
import org.bcdns.credential.biz.VcInternalBiz;
import org.bcdns.credential.dto.req.VcApplyReqDto;
import org.bcdns.credential.dto.req.VcTpBtaReqDto;
import org.bcdns.credential.dto.resp.DataResp;
import org.bcdns.credential.dto.resp.VcApplyRespDto;
import org.bcdns.credential.dto.resp.VcTpBtaRespDto;
import org.bcdns.credential.enums.ExceptionEnum;
import org.bcdns.credential.exception.APIException;
import org.bcdns.credential.model.VcAuditDomain;
import org.bcdns.credential.model.VcRecordDomain;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.MockedStatic;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.security.PublicKey;
import java.util.*;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@ActiveProfiles("test")
@RunWith(SpringRunner.class)
@Sql(scripts = {"classpath:init.sql"}, executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD)
@Sql(scripts = {"classpath:drop.sql"}, executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)
@SpringBootTest(classes = CredentialApplication.class)
public class ThirdPartyBlockchainTrustAnchorTest {

    private static final String apiKey = "pqnzeMg32DtMm4Et";

    private static final String apiSecret = "22ad8c019c1b1b831821ffb0f571f2c311ee6e23";

    private static final String issuerId = "did:bid:efYqASNNKhotQLdJH9N83jniXJyinmDX";

    private static final String accessToken = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3N1ZXJJZCI6ImRpZDpiaWQ6ZWZZcUFTTk5LaG90UUxkSkg5Tjgzam5pWEp5aW5tRFgiLCJhcGlLZXkiOiJwcW56ZU1nMzJEdE1tNEV0IiwiaXNzIjoiQklGLUNIQUlOIiwiZXhwIjoxNzI5NTIyNzU0fQ.duEHEbsmY8H_sjUu4IW67xy0weZuyTpFpUZ0bZLxE2U";

    private static final String applyNo = "cf7d0c7fdd70379b7d795a8bd7f0192f";

    private static final String sdkUrl = "http://test.bifcore.bitfactory.cn";

    private static final String senderAddress = "did:bid:efYqASNNKhotQLdJH9N83jniXJyinmDX";

    private static final String senderPrivateKey = "priSPKkeE5bJuRdsbBeYRMHR6vF6M6PJV97jbwAHomVQodn3x3";

//    private static final String relayerContract = "did:bid:efVhZTnRoebM1wBeoFYEcGi2MJBKi39E";

    private static final String relayerContract = "did:bid:ef24x8DQSCa1k5RVnN9uqWi96o8TmCnkj";

    private static final String relayerContractByteCode = "";

    private static final String TPBTAContract = "did:bid:efg633YNeBte5hD6VW5RfeqAk22g6BXf";

    private static final String TPBTAContractByteCode = "60806040526000339050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35061176a806100b46000396000f30060806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633399dde014610093578063405e748214610150578063715018a6146102405780638da5cb5b14610257578063a58d25ef146102ae578063da795cbd14610325578063e3c71f70146103b4578063f2fde38b14610439575b600080fd5b34801561009f57600080fd5b5061014e600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803561ffff169060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061047c565b005b34801561015c57600080fd5b506101c5600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803561ffff169060200190929190505050610bf0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102055780820151818401526020810190506101ea565b50505050905090810190601f1680156102325780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024c57600080fd5b50610255610d33565b005b34801561026357600080fd5b5061026c610e9c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102ba57600080fd5b50610323600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803561ffff169060200190929190505050610ec5565b005b34801561033157600080fd5b5061039a600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803561ffff169060200190929190505050611328565b604051808215151515815260200191505060405180910390f35b3480156103c057600080fd5b5061041b600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506113c7565b604051808261ffff1661ffff16815260200191505060405180910390f35b34801561044557600080fd5b5061047a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061144a565b005b61048461167d565b3373ffffffffffffffffffffffffffffffffffffffff166104a3610e9c565b73ffffffffffffffffffffffffffffffffffffffff1614151561052e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60008361ffff161115156105aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f74706274612076657273696f6e206d75737420676174686572207468616e203081525060200191505060405180910390fd5b60018361ffff1614156106f55760006001856040518082805190602001908083835b6020831015156105f157805182526020820191506020810190506020830392506105cc565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060008561ffff1661ffff1681526020019081526020016000206000018054600181600116156101000203166002900490501415156106f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001807f54686972645061727479426c6f636b636861696e5472757374416e63686f722081526020017f686173206265656e20726567697374657265640000000000000000000000000081525060400191505060405180910390fd5b61096c565b60006001856040518082805190602001908083835b60208310151561072f578051825260208201915060208101905060208303925061070a565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060008561ffff1661ffff16815260200190815260200160002060000180546001816001161561010002031660029004905014151561082e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f545042544120696e20726571756573742076657273696f6e206861732062656581526020017f6e2072656769737465726564000000000000000000000000000000000000000081525060400191505060405180910390fd5b60006001856040518082805190602001908083835b6020831015156108685780518252602082019150602081019050602083039250610843565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006001860361ffff1661ffff1681526020019081526020016000206000018054600181600116156101000203166002900490501415151561096b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f4c61737420747062746156657273696f6e20686173206e6f74206265656e207281526020017f656769737465726564000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b8181600001819052506001816020019015159081151581525050806001856040518082805190602001908083835b6020831015156109bf578051825260208201915060208101905060208303925061099a565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060008561ffff1661ffff1681526020019081526020016000206000820151816000019080519060200190610a27929190611699565b5060208201518160010160006101000a81548160ff021916908315150217905550905050826002856040518082805190602001908083835b602083101515610a845780518252602082019150602081019050602083039250610a5f565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548161ffff021916908361ffff1602179055507fa380d383275d939d3d29b4f55e31f3b4fd966b737e614d5445c4e7de8620c41384848460405180806020018461ffff1661ffff16815260200180602001838103835286818151815260200191508051906020019080838360005b83811015610b47578082015181840152602081019050610b2c565b50505050905090810190601f168015610b745780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015610bad578082015181840152602081019050610b92565b50505050905090810190601f168015610bda5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a150505050565b606060008261ffff161415610c0b57610c08836113c7565b91505b6001836040518082805190602001908083835b602083101515610c435780518252602082019150602081019050602083039250610c1e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060008361ffff1661ffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d265780601f10610cfb57610100808354040283529160200191610d26565b820191906000526020600020905b815481529060010190602001808311610d0957829003601f168201915b5050505050905092915050565b3373ffffffffffffffffffffffffffffffffffffffff16610d52610e9c565b73ffffffffffffffffffffffffffffffffffffffff16141515610ddd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff16610ee4610e9c565b73ffffffffffffffffffffffffffffffffffffffff16141515610f6f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60006001836040518082805190602001908083835b602083101515610fa95780518252602082019150602081019050602083039250610f84565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060008361ffff1661ffff168152602001908152602001600020600001805460018160011615610100020316600290049050141515156110a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260378152602001807f54686972645061727479426c6f636b636861696e5472757374416e63686f722081526020017f686173206e6f74206265656e207265676973746572656400000000000000000081525060400191505060405180910390fd5b6001826040518082805190602001908083835b6020831015156110e157805182526020820191506020810190506020830392506110bc565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060008261ffff1661ffff16815260200190815260200160002060010160009054906101000a900460ff1615156111d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f54686972645061727479426c6f636b636861696e5472757374416e63686f722081526020017f686173206265656e207265766f6b65640000000000000000000000000000000081525060400191505060405180910390fd5b60006001836040518082805190602001908083835b60208310151561121257805182526020820191506020810190506020830392506111ed565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060008361ffff1661ffff16815260200190815260200160002060010160006101000a81548160ff0219169083151502179055507f4e79eaa31fcb662ae3abc41df4d3338938e1bbb308dd776352c75d05ab42971a828260405180806020018361ffff1661ffff168152602001828103825284818151815260200191508051906020019080838360005b838110156112e95780820151818401526020810190506112ce565b50505050905090810190601f1680156113165780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b60006001836040518082805190602001908083835b602083101515611362578051825260208201915060208101905060208303925061133d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060008361ffff1661ffff16815260200190815260200160002060010160009054906101000a900460ff16905092915050565b60006002826040518082805190602001908083835b60208310151561140157805182526020820191506020810190506020830392506113dc565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900461ffff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff16611469610e9c565b73ffffffffffffffffffffffffffffffffffffffff161415156114f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156115bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6040805190810160405280606081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106116da57805160ff1916838001178555611708565b82800160010185558215611708579182015b828111156117075782518255916020019190600101906116ec565b5b5090506117159190611719565b5090565b61173b91905b8082111561173757600081600090555060010161171f565b5090565b905600a165627a7a72305820221dac468515c7548d03b04e774a28ef46a3d8f31aa1a92f0044ba99eba2f49e0029";

    private static final String testTypeAddress = "did:bid:efU9ixkLdu9aT1vS3BV8nDY8ZE3wJZmV";
//    private static final String testTypeAddress = "did:bid:efTvFC48xJn28w71zKeKjHW4uwtM3JwD";

    private static final String ADD_INT
            = "{\"function\":\"addUint(int)\",\"args\":\"{}\",\"return\":\"returns(bool)\"}";

    private static final String ADD_CERTIFICATE_BY_VCID
            = "{\"function\":\"addCertificate(string,bytes,address)\",\"args\":\"'{}','{}',{}\"}";

    private static final String GET_CERT_BY_ID
            = "{\"function\":\"getCertById(string)\",\"args\":\"'{}'\",\"return\":\"returns(bytes)\"}";

    private static final String ADD_TPBTA_BY_LANE
            = "{\"function\":\"addTPBTA(string,uint16,bytes)\",\"args\":\"'{}',{},'{}'\"}";

    private static final String GET_TPBTA_BY_LANE
            = "{\"function\":\"getTPBTAByLane(string,uint16)\",\"args\":\"'{}',{}\",\"return\":\"returns(bytes)\"}";

    private static final String GET_TPBTA_VERSION_BY_LANE
            = "{\"function\":\"getTPBTALatestVersionByLane(string)\",\"args\":\"'{}'\",\"return\":\"returns(uint16)\"}";

    // CrossChainCertificateUtil.formatCrossChainCertificateToPem(clientCredential.clientCert)
    private static final String RELAYER_CERT = "-----BEGIN RELAYER CERTIFICATE-----\n" +
            "AAD7AQAAAAABAAAAMQEAEAAAAGFudGNoYWluLXJlbGF5ZXICAAEAAAADAwA7AAAA\n" +
            "AAA1AAAAAAABAAAAAQEAKAAAAGRpZDpiaWQ6ZWZiVGh5NXNiRzdQM21GVXAyRVdO\n" +
            "NW9RR1g2TFVHd2cEAAgAAACiN2RlAAAAAAUACAAAACJrRWcAAAAABgDmAAAAAADg\n" +
            "AAAAAAADAAAAMS4wAQAQAAAAYW50Y2hhaW4tcmVsYXllcgMAOwAAAAAANQAAAAAA\n" +
            "AQAAAAEBACgAAABkaWQ6YmlkOmVmYlRoeTVzYkc3UDNtRlVwMkVXTjVvUUdYNkxV\n" +
            "R3dnBAB6AAAAeyJwdWJsaWNLZXkiOlt7InR5cGUiOiJFRDI1NTE5IiwicHVibGlj\n" +
            "S2V5SGV4IjoiYjA2NTY2YWY2NjVlZTU1MDYzNWU5ODM3NWM3YjM4ODc2YTJjYzMx\n" +
            "ZTNhOWQ4MTg5NTdlNDZhMjRhMGYyNWE3NGE0NGNjZSJ9XX0HAIgAAAAAAIIAAAAA\n" +
            "AAMAAABTTTMBACAAAAAtlIZVqagiDAs3w16jV3kN+8iL46l8oFnFSG24BH6dJgIA\n" +
            "BwAAAEVkMjU1MTkDAEAAAACTFPfALDJx8NQ3zRV55J+t7umT3qPhq805zDOMP7UH\n" +
            "HvCKAeiXthTuajOvODZvRUdN0gVQBCMnWlKq2dOx0ocO\n" +
            "-----END RELAYER CERTIFICATE-----\n";

    // README.md 调用/external/vc/download接口下载证书
    private static final String RELAYER_CREDENTIAL = "AAAUAgAAAAABAAAAMQEAKQAAAGRpZDpiaWQ6ZWYyNkxYM3l1bjZLbkpUaUFVRmlpUExTYzY3ZnZnaWROAgABAAAAAwMAOwAAAAAANQAAAAAAAQAAAAEBACgAAABkaWQ6YmlkOmVmWXFBU05OS2hvdFFMZEpIOU44M2puaVhKeWlubURYBAAIAAAA+t8VZwAAAAAFAAgAAAB6E/doAAAAAAYA5gAAAAAA4AAAAAAAAwAAADEuMAEAEAAAAGFudGNoYWluLXJlbGF5ZXIDADsAAAAAADUAAAAAAAEAAAABAQAoAAAAZGlkOmJpZDplZmJUaHk1c2JHN1AzbUZVcDJFV041b1FHWDZMVUd3ZwQAegAAAHsicHVibGljS2V5IjpbeyJ0eXBlIjoiRUQyNTUxOSIsInB1YmxpY0tleUhleCI6ImIwNjU2NmFmNjY1ZWU1NTA2MzVlOTgzNzVjN2IzODg3NmEyY2MzMWUzYTlkODE4OTU3ZTQ2YTI0YTBmMjVhNzRhNDRjY2UifV19BwCIAAAAAACCAAAAAAADAAAAU00zAQAgAAAAQmyGQWALIggP0VhjxRCRo7BuUbeREHaOwltW1y5848gCAAcAAABFZDI1NTE5AwBAAAAAHkJJujeOTQHJ+AFPy8pl8WKbNBd1Vs5cYwCa3wZCyqzot1K53I1dyFFTf5kDs982aun9wkqXqs2zsxLE1pjiDA==";

    // HexUtil.encodeHexStr(vcTpBtaReqDto.getTpbta())
    private static final String tpbta = "0000ca0200000000040000000100000001000400000001000000020001000000010300a000000000009a000000000003000000312e3001000d000000636f6d6d69747465652d7074630200010000000103006b000000000065000000000001000000000100580000003056301006072a8648ce3d020106052b8104000a0342000450bcd20cf3389a14641a90a2562ac765359fcee67f3df3bafbf45f5601a9671b38114419870e529d8588c0af7d2b10cf371b581bb3848960c0efe10a6545812304000000000004007200000000006c00000000001a0000000000140000000000040000007465737401000400000074657374010020000000000000000000000000000000000000000000000000000000000000000000000102002000000000000000000000000000000000000000000000000000000000000000000000010500040000000100000006000a0000004b454343414b2d3235360700d80000000000d2000000000009000000636f6d6d697474656501002400000000001e0000000000180000000000120000000000020000003e3d010004000000000000000200930000008f0000000000890000000000050000006e6f6465310100010000000102007100000000006b00000000000700000064656661756c740100580000003056301006072a8648ce3d020106052b8104000a0342000450bcd20cf3389a14641a90a2562ac765359fcee67f3df3bafbf45f5601a9671b38114419870e529d8588c0af7d2b10cf371b581bb3848960c0efe10a65458123ff009300000000008d000000000009000000636f6d6d69747465650100780000007400000000006e0000000000050000006e6f6465310100160000004b656363616b32353657697468536563703235366b3102004100000089127c1aeec72fceb1c0954646d597c0ec563e3e6dca8705922cba2007220c30631f430e1a8fb097ec5aebb7da7506eca4f3ae0dfd5701d3dda39cf4737c165d00";

    // HexUtil.encodeHexStr(vcTpBtaReqDto.getSign())
    private static final String sign = "8e76af2a35b46291dd68edbc34604b632e00a5812e19cb549675d5ef21891dafa0ece64a1b5826d5bade4858623372b3404f82ce44894d8e28158351af9d550c";

    // Base64.encode(CrossChainCertificateUtil.getPublicKeyFromCrossChainCertificate(clientCredential.getClientCert()).getEncoded())
    private static final String publicKey = "MCowBQYDK2VwAyEAr2Ze5VBjXpg3XHs4h2oswx46nYGJV+RqJKDyWnSkTM4=";

    @Autowired
    private VcExternalBiz biz;

    @Autowired
    private VcInternalBiz inBiz;

    private static BIFSDK sdk;

    private static MockedStatic mockStaticObj = null;

    @BeforeClass
    public static void setUp() throws Exception {
        sdk = BIFSDK.getInstance(sdkUrl);
    }

    @AfterClass
    public static void afterClass() throws Exception {
        if (ObjectUtil.isNotNull(mockStaticObj)) {
            mockStaticObj.close();
        }
    }

    @Test
    public void testDeplRelayerManagerContract() {
        // 初始化参数
//        String payload = "60806040526000339050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506110c1806100b46000396000f30060806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630b482d4e14610093578063106ed28f1461013d5780632b065db8146101b45780635cb1204e146101e5578063715018a61461022e5780638da5cb5b14610245578063b53921481461029c578063f2fde38b14610313575b600080fd5b34801561009f57600080fd5b506100c26004803603810190808035600019169060200190929190505050610356565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101025780820151818401526020810190506100e7565b50505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014957600080fd5b506101b26004803603810190808035600019169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610416565b005b3480156101c057600080fd5b506101e36004803603810190808035600019169060200190929190505050610714565b005b3480156101f157600080fd5b5061021460048036038101908080356000191690602001909291905050506108d7565b604051808215151515815260200191505060405180910390f35b34801561023a57600080fd5b5061024361090c565b005b34801561025157600080fd5b5061025a610a75565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102a857600080fd5b506103116004803603810190808035600019169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610a9e565b005b34801561031f57600080fd5b50610354600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d21565b005b60606001600083600019166000191681526020019081526020016000206000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561040a5780601f106103df5761010080835404028352916020019161040a565b820191906000526020600020905b8154815290600101906020018083116103ed57829003601f168201915b50505050509050919050565b3373ffffffffffffffffffffffffffffffffffffffff16610435610a75565b73ffffffffffffffffffffffffffffffffffffffff161415156104c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600060016000846000191660001916815260200190815260200160002060000180546001816001161561010002031660029004905014151515610591576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f7074635472757374526f6f7420686173206e6f74206265656e2072656769737481526020017f657265640000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60016000836000191660001916815260200190815260200160002060010160009054906101000a900460ff161515610631576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f5054435472757374526f6f7420686173206265656e207265766f6b656400000081525060200191505060405180910390fd5b806001600084600019166000191681526020019081526020016000206000019080519060200190610663929190610f54565b507fefb57aa461320f3df39d600e376189a104d295e9a75dc4d3cb4c3a3193fef1c8828260405180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b838110156106d55780820151818401526020810190506106ba565b50505050905090810190601f1680156107025780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b3373ffffffffffffffffffffffffffffffffffffffff16610733610a75565b73ffffffffffffffffffffffffffffffffffffffff161415156107be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60016000826000191660001916815260200190815260200160002060010160009054906101000a900460ff16151561085e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f5054435472757374526f6f7420686173206265656e207265766f6b656400000081525060200191505060405180910390fd5b600060016000836000191660001916815260200190815260200160002060010160006101000a81548160ff0219169083151502179055507f5cffe022e2d17bd39a1e1a570e64f967e9bfdf808d2073763126a8182fdb3def8160405180826000191660001916815260200191505060405180910390a150565b600060016000836000191660001916815260200190815260200160002060010160009054906101000a900460ff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff1661092b610a75565b73ffffffffffffffffffffffffffffffffffffffff161415156109b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610aa6610fd4565b3373ffffffffffffffffffffffffffffffffffffffff16610ac5610a75565b73ffffffffffffffffffffffffffffffffffffffff16141515610b50576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6000600160008560001916600019168152602001908152602001600020600001805460018160011615610100020316600290049050141515610bfa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f7074635472757374526f6f7420686173206265656e207265676973746572656481525060200191505060405180910390fd5b8181600001819052506001816020019015159081151581525050806001600085600019166000191681526020019081526020016000206000820151816000019080519060200190610c4c929190610ff0565b5060208201518160010160006101000a81548160ff0219169083151502179055509050507f262168c910ebafa646981d4054497dcc20d953447bcdea2a2546fb5843e19efd838360405180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610ce1578082015181840152602081019050610cc6565b50505050905090810190601f168015610d0e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1505050565b3373ffffffffffffffffffffffffffffffffffffffff16610d40610a75565b73ffffffffffffffffffffffffffffffffffffffff16141515610dcb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610e96576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610f9557805160ff1916838001178555610fc3565b82800160010185558215610fc3579182015b82811115610fc2578251825591602001919060010190610fa7565b5b509050610fd09190611070565b5090565b6040805190810160405280606081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061103157805160ff191683800117855561105f565b8280016001018555821561105f579182015b8281111561105e578251825591602001919060010190611043565b5b50905061106c9190611070565b5090565b61109291905b8082111561108e576000816000905550600101611076565b5090565b905600a165627a7a72305820cbdd77794758cd758c9f384a89ea29b2a7e59f7dda0f25ba615caf660c812e070029";
        Long initBalance = ToBaseUnit.ToUGas("0.01");
        BIFContractCreateRequest request = new BIFContractCreateRequest();
        request.setSenderAddress(senderAddress);
        request.setPrivateKey(senderPrivateKey);
        request.setInitBalance(initBalance);
        request.setPayload(relayerContractByteCode);
        request.setRemarks("create contract");
        request.setType(1);
        request.setFeeLimit(2000000000L);
//        request.setDomainId(20);
//        request.setGasPrice(100L);

        // 调用bifContractCreate接口
        BIFContractCreateResponse response = sdk.getBIFContractService().contractCreate(request);
        if (response.getErrorCode() == 0) {
            System.out.println(JsonUtils.toJSONString(response.getResult()));
        } else {
            System.out.println(JsonUtils.toJSONString(response));
        }
    }

    @Test
    public void testDeplyTPBTAContract() {
        // 初始化参数
//        String payload = "60806040526000339050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506110c1806100b46000396000f30060806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630b482d4e14610093578063106ed28f1461013d5780632b065db8146101b45780635cb1204e146101e5578063715018a61461022e5780638da5cb5b14610245578063b53921481461029c578063f2fde38b14610313575b600080fd5b34801561009f57600080fd5b506100c26004803603810190808035600019169060200190929190505050610356565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101025780820151818401526020810190506100e7565b50505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014957600080fd5b506101b26004803603810190808035600019169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610416565b005b3480156101c057600080fd5b506101e36004803603810190808035600019169060200190929190505050610714565b005b3480156101f157600080fd5b5061021460048036038101908080356000191690602001909291905050506108d7565b604051808215151515815260200191505060405180910390f35b34801561023a57600080fd5b5061024361090c565b005b34801561025157600080fd5b5061025a610a75565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102a857600080fd5b506103116004803603810190808035600019169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610a9e565b005b34801561031f57600080fd5b50610354600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d21565b005b60606001600083600019166000191681526020019081526020016000206000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561040a5780601f106103df5761010080835404028352916020019161040a565b820191906000526020600020905b8154815290600101906020018083116103ed57829003601f168201915b50505050509050919050565b3373ffffffffffffffffffffffffffffffffffffffff16610435610a75565b73ffffffffffffffffffffffffffffffffffffffff161415156104c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600060016000846000191660001916815260200190815260200160002060000180546001816001161561010002031660029004905014151515610591576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f7074635472757374526f6f7420686173206e6f74206265656e2072656769737481526020017f657265640000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60016000836000191660001916815260200190815260200160002060010160009054906101000a900460ff161515610631576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f5054435472757374526f6f7420686173206265656e207265766f6b656400000081525060200191505060405180910390fd5b806001600084600019166000191681526020019081526020016000206000019080519060200190610663929190610f54565b507fefb57aa461320f3df39d600e376189a104d295e9a75dc4d3cb4c3a3193fef1c8828260405180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b838110156106d55780820151818401526020810190506106ba565b50505050905090810190601f1680156107025780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b3373ffffffffffffffffffffffffffffffffffffffff16610733610a75565b73ffffffffffffffffffffffffffffffffffffffff161415156107be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60016000826000191660001916815260200190815260200160002060010160009054906101000a900460ff16151561085e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f5054435472757374526f6f7420686173206265656e207265766f6b656400000081525060200191505060405180910390fd5b600060016000836000191660001916815260200190815260200160002060010160006101000a81548160ff0219169083151502179055507f5cffe022e2d17bd39a1e1a570e64f967e9bfdf808d2073763126a8182fdb3def8160405180826000191660001916815260200191505060405180910390a150565b600060016000836000191660001916815260200190815260200160002060010160009054906101000a900460ff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff1661092b610a75565b73ffffffffffffffffffffffffffffffffffffffff161415156109b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610aa6610fd4565b3373ffffffffffffffffffffffffffffffffffffffff16610ac5610a75565b73ffffffffffffffffffffffffffffffffffffffff16141515610b50576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6000600160008560001916600019168152602001908152602001600020600001805460018160011615610100020316600290049050141515610bfa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f7074635472757374526f6f7420686173206265656e207265676973746572656481525060200191505060405180910390fd5b8181600001819052506001816020019015159081151581525050806001600085600019166000191681526020019081526020016000206000820151816000019080519060200190610c4c929190610ff0565b5060208201518160010160006101000a81548160ff0219169083151502179055509050507f262168c910ebafa646981d4054497dcc20d953447bcdea2a2546fb5843e19efd838360405180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610ce1578082015181840152602081019050610cc6565b50505050905090810190601f168015610d0e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1505050565b3373ffffffffffffffffffffffffffffffffffffffff16610d40610a75565b73ffffffffffffffffffffffffffffffffffffffff16141515610dcb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610e96576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610f9557805160ff1916838001178555610fc3565b82800160010185558215610fc3579182015b82811115610fc2578251825591602001919060010190610fa7565b5b509050610fd09190611070565b5090565b6040805190810160405280606081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061103157805160ff191683800117855561105f565b8280016001018555821561105f579182015b8281111561105e578251825591602001919060010190611043565b5b50905061106c9190611070565b5090565b61109291905b8082111561108e576000816000905550600101611076565b5090565b905600a165627a7a72305820cbdd77794758cd758c9f384a89ea29b2a7e59f7dda0f25ba615caf660c812e070029";
        Long initBalance = ToBaseUnit.ToUGas("0.01");
        BIFContractCreateRequest request = new BIFContractCreateRequest();
        request.setSenderAddress(senderAddress);
        request.setPrivateKey(senderPrivateKey);
        request.setInitBalance(initBalance);
        request.setPayload(TPBTAContractByteCode);
        request.setRemarks("create contract");
        request.setType(1);
        request.setFeeLimit(2000000000L);
//        request.setDomainId(20);
//        request.setGasPrice(100L);

        // 调用bifContractCreate接口
        BIFContractCreateResponse response = sdk.getBIFContractService().contractCreate(request);
        if (response.getErrorCode() == 0) {
            System.out.println(JsonUtils.toJSONString(response.getResult()));
        } else {
            System.out.println(JsonUtils.toJSONString(response));
        }
    }

    @Test
    public void testQueryContractAddress() {
        // 部署合约的txhash查询合约地址
        String hash = "0769b4bf4958d44aedc637f232d39a4e957447920de33072153af2ab47463507";
        BIFContractGetAddressRequest request = new BIFContractGetAddressRequest();
        request.setHash(hash);
        request.setDomainId(20);

        // Call getAddress
        BIFContractGetAddressResponse response = sdk.getBIFContractService().getContractAddress(request);
        if (response.getErrorCode() == 0) {
            System.out.println(JsonUtils.toJSONString(response.getResult()));
        } else {
            System.out.println(JsonUtils.toJSONString(response));
        }
    }

    @Test
    public void getContractInfo() {
        // 根据BIF合约地址ContractAddress查合约详情
        BIFContractGetInfoRequest request = new BIFContractGetInfoRequest();
        request.setContractAddress(TPBTAContract);
        request.setDomainId(20);

        // Call getContractInfo
        BIFContractGetInfoResponse response = sdk.getBIFContractService().getContractInfo(request);
        if (response.getErrorCode() == 0) {
            System.out.println(JsonUtils.toJSONString(response.getResult()));
        } else {
            System.out.println(JsonUtils.toJSONString(response));
        }
    }

    @Test
    public void testCheckTransaction() {
        BIFTransactionGetInfoRequest request = new BIFTransactionGetInfoRequest();
        request.setHash("c53b9609a9d1b5044eda372ac60e6973da1d6bf38d9a0e631edc2f0bde120a5b");
        request.setDomainId(20);

        // call getTransactionInfo
        BIFTransactionGetInfoResponse response = sdk.getBIFTransactionService().getTransactionInfo(request);
        if (response.getErrorCode() == 0) {
            System.out.println(JsonUtils.toJSONString(response.getResult()));
        } else {
            System.out.println(JsonUtils.toJSONString(response));
        }
    }

    // ---------------------------------test add thirdPartyBlockchainTrustAnchor---------------------------------
    @Test
    public void testSignVerify() {
        AbstractCrossChainCertificate relayerCert = CrossChainCertificateUtil.readCrossChainCertificateFromPem(RELAYER_CERT.getBytes());
        boolean verifyResult = SignAlgoEnum.getByName("Ed25519").getSigner().verify(
                CrossChainCertificateUtil.getPublicKeyFromCrossChainCertificate(relayerCert),
                HexUtil.decodeHex(tpbta),
                HexUtil.decodeHex(sign)
        );
        System.out.println(verifyResult);
    }

    @Test
    public void testVcApply() {
        // 构造证书申请请求
        AbstractCrossChainCertificate relayerCert = CrossChainCertificateUtil.readCrossChainCertificateFromPem(RELAYER_CERT.getBytes());
        VcApplyReqDto vcApplyReqDto = new VcApplyReqDto();
        vcApplyReqDto.setContent(relayerCert.getEncodedToSign());
        vcApplyReqDto.setCredentialType(relayerCert.getType().ordinal());
        vcApplyReqDto.setPublicKey("b06566af665ee550635e98375c7b38876a2cc31e3a9d818957e46a24a0f25a74a44cce"); // clientCredential.getBifFormatAuthorizedPublicKey()
        String vcApplySign = "9314f7c02c3271f0d437cd1579e49fadeee993dea3e1abcd39cc338c3fb5071ef08a01e897b614ee6a33af38366f45474dd205500423275a52aad9d3b1d2870e";
        vcApplyReqDto.setSign(HexUtil.decodeHex(vcApplySign));
        vcApplyReqDto.setSignAlgo("Ed25519");
        DataResp<VcApplyRespDto> vcApplyResp = biz.vcApply(vcApplyReqDto);
        System.out.println(vcApplyResp.getData());
    }

    @Test
    public void testVcInternalBizApplyRelayerCertificate() {
//        inBiz.vcAudit();
    }

    @Test
    public void testVcApplyRelayerCertificate() {
        AbstractCrossChainCertificate ptcCertObj = CrossChainCertificateUtil.readCrossChainCertificateFromPem(RELAYER_CERT.getBytes());
        String relayAddress = BIDHelper.encAddress(
                BIDHelper.getKeyTypeFromPublicKey(CrossChainCertificateUtil.getPublicKeyFromCrossChainCertificate(ptcCertObj)),
                CrossChainCertificateUtil.getRawPublicKeyFromCrossChainCertificate(ptcCertObj)
        );
        String input = StrUtil.format(
                ADD_CERTIFICATE_BY_VCID,
//                ptcCertObj.getId(), Base64.encode(ptcCertObj.encode()), relayAddress
//                "antchain-test", "0x" + Base64.encode(ptcCertObj.encode()), relayAddress
                ptcCertObj.getId(), "0x" + HexUtil.encodeHexStr(ptcCertObj.encode()), relayAddress
        );
        BIFContractInvokeRequest request = new BIFContractInvokeRequest();
        request.setSenderAddress(senderAddress);
        request.setPrivateKey(senderPrivateKey);
        request.setContractAddress(relayerContract);
        request.setBIFAmount(0L);
        request.setRemarks("contract invoke");
        request.setDomainId(0);
        request.setInput(input);
        request.setGasPrice(1L);

        // invoke Transaction
        BIFContractInvokeResponse response = sdk.getBIFContractService().contractInvoke(request);
        if (response.getErrorCode() == 0) {
            System.out.println(JsonUtils.toJSONString(response.getResult()));
        } else {
            System.out.println(JsonUtils.toJSONString(response));
        }
    }

    private String getRelayInput(AbstractCrossChainCertificate certificate) {
        String relayAddress = BIDHelper.encAddress(BIDHelper.getKeyTypeFromPublicKey(CrossChainCertificateUtil.getPublicKeyFromCrossChainCertificate(certificate)),
                CrossChainCertificateUtil.getRawPublicKeyFromCrossChainCertificate(certificate));
        return StrUtil.format("{\"function\":\"addCertificate(string,bytes,address)\",\"args\":\"'{}','{}',{}\"}", certificate.getId(), Base64.encode(certificate.encode()), relayAddress);
    }

    @Test
    public void testQueryRelayerCertificate() {
        AbstractCrossChainCertificate ptcCertObj = CrossChainCertificateUtil.readCrossChainCertificateFromPem(RELAYER_CERT.getBytes());

        BIFContractService bifContractService = sdk.getBIFContractService();
        BIFContractCallRequest bifContractCallRequest = new BIFContractCallRequest();
        bifContractCallRequest.setDomainId(20);
        bifContractCallRequest.setContractAddress(relayerContract);
        bifContractCallRequest.setGasPrice(1L);
        bifContractCallRequest.setInput(
                StrUtil.format(
                        GET_CERT_BY_ID, ptcCertObj.getId()
                )
        );
        BIFContractCallResponse callResp = bifContractService.contractQuery(bifContractCallRequest);
        if (ExceptionEnum.SUCCESS.getErrorCode().equals(callResp.getErrorCode())) {
            if (((HashMap<String, Object>) callResp.getResult().getQueryRets().get(0)).containsKey("result")) {
                String resp = decodeResultFromResponse(callResp);
                // recover certificate
                AbstractCrossChainCertificate certFromCont = CrossChainCertificateFactory.createCrossChainCertificate(HexUtil.decodeHex(resp)); // decodeResultFromResponse(callResp) maybe has remove '0x'
                boolean verifyResult = SignAlgoEnum.getByName("Ed25519").getSigner().verify(
                        CrossChainCertificateUtil.getPublicKeyFromCrossChainCertificate(certFromCont),
                        HexUtil.decodeHex(tpbta),
                        HexUtil.decodeHex(sign)
                );
                if (verifyResult) {
                    System.out.println("TPBTA Signature verified success!");
                } else {
                    System.out.println("TPBTA Signature verification failed!");
                }
            } else {
                System.out.println("query failed, error:2");
            }
        } else {
            System.out.println("query failed, error:1");
        }
    }

    @Test
    public void testAddMockTPBTA() {
        /*// 构造证书申请请求
        AbstractCrossChainCertificate relayerCert = CrossChainCertificateUtil.readCrossChainCertificateFromPem(RELAYER_CERT.getBytes());
        VcApplyReqDto vcApplyReqDto = new VcApplyReqDto();
        vcApplyReqDto.setContent(relayerCert.getEncodedToSign());
        vcApplyReqDto.setCredentialType(relayerCert.getType().ordinal());
        vcApplyReqDto.setPublicKey("b06566af665ee550635e98375c7b38876a2cc31e3a9d818957e46a24a0f25a74a44cce"); // clientCredential.getBifFormatAuthorizedPublicKey()
        String vcApplySign = "9314f7c02c3271f0d437cd1579e49fadeee993dea3e1abcd39cc338c3fb5071ef08a01e897b614ee6a33af38366f45474dd205500423275a52aad9d3b1d2870e";
        vcApplyReqDto.setSign(HexUtil.decodeHex(vcApplySign));
        vcApplyReqDto.setSignAlgo("Ed25519");
        DataResp<VcApplyRespDto> vcApplyResp = biz.vcApply(vcApplyReqDto);
        System.out.println(vcApplyResp.getData());*/

        // mock contract operation
        BIFSDK mockBifSdk = mock(BIFSDK.class);
        BIFContractService mockBifContractService = mock(BIFContractService.class);
        when(mockBifSdk.getBIFContractService()).thenReturn(mockBifContractService);
        try {
            mockStaticObj = mockStatic(BIFSDK.class);
            when(BIFSDK.getInstance(anyString())).thenReturn(mockBifSdk);
        } catch (Exception e) {
            if (ObjectUtil.isNotNull(mockStaticObj)) {
                mockStaticObj.close();
            }
        }
        BIFContractService bifContractService = mockBifSdk.getBIFContractService();
        BIFContractCallResponse mockBifContractCallResponse = new BIFContractCallResponse();
        BIFContractCallResult mockBifContractCallResult = new BIFContractCallResult();
        List<Object> list = new ArrayList<Object>();
        Map<String, Object> map = new HashMap<String, Object>();
        Map<String, Object> resultMap = new HashMap<String, Object>();
        resultMap.put("data", "[0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000]");
        map.put("result", resultMap);
        list.add(map);
        mockBifContractCallResult.setQueryRets(list);
        // mock contractQuery Request
        mockBifContractCallResponse.buildResponse(SdkError.SUCCESS, mockBifContractCallResult);
        when(bifContractService.contractQuery(any())).thenReturn(mockBifContractCallResponse);
        // mock contractInvoke Request
        BIFContractInvokeResponse mockBifContractInvokeResponse = new BIFContractInvokeResponse();
        BIFContractInvokeResult mockBifContractInvokeResult = new BIFContractInvokeResult();
        mockBifContractInvokeResponse.buildResponse(SdkError.SUCCESS, mockBifContractInvokeResult);
        when(bifContractService.contractInvoke(any())).thenReturn(mockBifContractInvokeResponse);

        // 构造客户端请求
        VcTpBtaReqDto reqDto = new VcTpBtaReqDto();
        reqDto.setSign(HexUtil.decodeHex(sign));
        reqDto.setTpbta(HexUtil.decodeHex(tpbta));
        reqDto.setPublicKey(publicKey);
        reqDto.setSignAlgo("Ed25519");
        // 请求到达BCDNS Server
        DataResp<VcTpBtaRespDto> vcTpBtaRespDtoDataResp = biz.vcAddThirdPartyBlockchainTrustAnchor(reqDto);
        Assert.assertTrue(vcTpBtaRespDtoDataResp.getData().isStatus());
    }

    @Test
    public void testQueryTPBTAv1() {
        AbstractCrossChainCertificate ptcCertObj = CrossChainCertificateUtil.readCrossChainCertificateFromPem(RELAYER_CERT.getBytes());
        /*String relayAddress = BIDHelper.encAddress(
                BIDHelper.getKeyTypeFromPublicKey(CrossChainCertificateUtil.getPublicKeyFromCrossChainCertificate(ptcCertObj)),
                CrossChainCertificateUtil.getRawPublicKeyFromCrossChainCertificate(ptcCertObj)
        );*/
        ThirdPartyBlockchainTrustAnchor tpbtaReq = ThirdPartyBlockchainTrustAnchor.decode(HexUtil.decodeHex(tpbta));
        byte[] tpbtaByte = ("0x12345").getBytes();
        String input = StrUtil.format(
                ADD_TPBTA_BY_LANE,
                tpbtaReq.getCrossChainLane().getSenderDomain().getDomain(), 3, "0x" + HexUtil.encodeHexStr(tpbta)
//                tpbtaReq.getCrossChainLane().getSenderDomain().getDomain(), 2, "0x" + HexUtil.encodeHexStr(tpbtaByte)
        );
        BIFContractInvokeRequest request = new BIFContractInvokeRequest();
        request.setSenderAddress(senderAddress);
        request.setPrivateKey(senderPrivateKey);
        request.setContractAddress(TPBTAContract);
        request.setBIFAmount(0L);
        request.setRemarks("contract invoke");
        request.setDomainId(0);
        request.setInput(input);
        request.setGasPrice(1L);

        // invoke Transaction
        BIFContractInvokeResponse response = sdk.getBIFContractService().contractInvoke(request);
        if (response.getErrorCode() == 0) {
            System.out.println(JsonUtils.toJSONString(response.getResult()));
        } else {
            System.out.println(JsonUtils.toJSONString(response));
        }


        /*BIFContractService bifContractService = sdk.getBIFContractService();
        BIFContractCallRequest bifContractCallRequest = new BIFContractCallRequest();
        bifContractCallRequest.setDomainId(20);
        bifContractCallRequest.setContractAddress(TPBTAContract);
        bifContractCallRequest.setGasPrice(1L);
        ThirdPartyBlockchainTrustAnchor tpbtaReq = ThirdPartyBlockchainTrustAnchor.decode(HexUtil.decodeHex(tpbta));
        String input = StrUtil.format(
                GET_TPBTA_BY_LANE,
                tpbtaReq.getCrossChainLane().getSenderDomain().getDomain(), 1
        );
        bifContractCallRequest.setInput(input);
        BIFContractCallResponse callResp = bifContractService.contractQuery(bifContractCallRequest);
        if (ExceptionEnum.SUCCESS.getErrorCode().equals(callResp.getErrorCode())) {
            if (JSONObject.parseObject(JSONObject.toJSONString(callResp.getResult().getQueryRets().get(0))).getJSONObject("result") != null) {
                String resp = decodeResultFromResponse(callResp);
                // recover certificate
                AbstractCrossChainCertificate certFromCont = CrossChainCertificateFactory.createCrossChainCertificate(HexUtil.decodeHex(resp)); // decodeResultFromResponse(callResp) maybe has remove '0x'
                PublicKey publicKey = CrossChainCertificateUtil.getPublicKeyFromCrossChainCertificate(certFromCont);
            } else {
                System.out.println("query failed, error:2");
            }
        } else {
            System.out.println("query failed, error:1");
        }*/
    }

    @Test
    public void testAddTPBTAv1() {
        // 构造客户端请求
        VcTpBtaReqDto reqDto = new VcTpBtaReqDto();
        reqDto.setVcId("antchain-relayer");
        reqDto.setTpbta(HexUtil.decodeHex(tpbta));
        reqDto.setPublicKey(publicKey);
        reqDto.setSign(HexUtil.decodeHex(sign));
        reqDto.setSignAlgo("Ed25519");
        // 请求到达BCDNS Server
        DataResp<VcTpBtaRespDto> vcTpBtaRespDtoDataResp = biz.vcAddThirdPartyBlockchainTrustAnchor(reqDto);
        Assert.assertTrue(vcTpBtaRespDtoDataResp.getData().isStatus());
    }

    @Test
    public void testQueryTPBTA() {
        BIFContractCallRequest bifContractCallRequest = new BIFContractCallRequest();
        ThirdPartyBlockchainTrustAnchor tpbtaReq = ThirdPartyBlockchainTrustAnchor.decode(HexUtil.decodeHex(tpbta));
        bifContractCallRequest.setInput(
                StrUtil.format(
                        GET_TPBTA_BY_LANE, tpbtaReq.getCrossChainLane().getLaneKey(), (int) 1
                )
        );
        bifContractCallRequest.setContractAddress(TPBTAContract);
        bifContractCallRequest.setGasPrice(1L);
        BIFContractCallResponse callResp = sdk.getBIFContractService().contractQuery(bifContractCallRequest);
        System.out.println(callResp.getResult().getQueryRets().get(0));
        if (0 != callResp.getErrorCode()) {
            throw new APIException(
                    ExceptionEnum.REGISTER_PTCTRUSTROOT_ERROR,
                    StrUtil.format(
                            "failed to query PTCTTrustRoot by ptcOid to BIF chain ( err_code: {}, err_msg: {} )",
                            callResp.getErrorCode(), callResp.getErrorDesc()
                    )
            );
        }
    }

    @Test
    public void queryTPBTALatestVersion() {
        BIFContractCallRequest bifContractCallRequest = new BIFContractCallRequest();
        ThirdPartyBlockchainTrustAnchor tpbtaReq = ThirdPartyBlockchainTrustAnchor.decode(HexUtil.decodeHex(tpbta));
        bifContractCallRequest.setInput(
                StrUtil.format(
                        GET_TPBTA_VERSION_BY_LANE, tpbtaReq.getCrossChainLane().getLaneKey()
                )
        );
        bifContractCallRequest.setContractAddress(TPBTAContract);
        bifContractCallRequest.setGasPrice(1L);
        BIFContractCallResponse callResp = sdk.getBIFContractService().contractQuery(bifContractCallRequest);
        System.out.println(callResp.getResult().getQueryRets().get(0));
        if (0 != callResp.getErrorCode()) {
            throw new APIException(
                    ExceptionEnum.REGISTER_PTCTRUSTROOT_ERROR,
                    StrUtil.format(
                            "failed to query PTCTTrustRoot by ptcOid to BIF chain ( err_code: {}, err_msg: {} )",
                            callResp.getErrorCode(), callResp.getErrorDesc()
                    )
            );
        }
    }

    private String decodeResultFromResponse(BIFContractCallResponse response) {
        Map<String, Map<String, String>> resMap = (Map<String, Map<String, String>>) (response.getResult().getQueryRets().get(0));
        String res = resMap.get("result").get("data").trim();
        System.out.println("decodeResultFromResponse\n" + res);
        res = StrUtil.removeSuffix(
                StrUtil.removePrefix(res, "[").trim(),
                "]"
        ).trim();
        if (HexUtil.isHexNumber(res)) {
            res = StrUtil.removePrefix(res.trim(), "0x");
        }
        return res;
    }

    @Test
    public void testUint16Type() {
        String byteCode = "60806040526000339050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350610574806100b46000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063548b9cfe14610067578063715018a6146100b05780638da5cb5b146100c7578063f2fde38b1461011e575b600080fd5b34801561007357600080fd5b50610096600480360381019080803561ffff169060200190929190505050610161565b604051808215151515815260200191505060405180910390f35b3480156100bc57600080fd5b506100c5610183565b005b3480156100d357600080fd5b506100dc6102ec565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561012a57600080fd5b5061015f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610315565b005b6000808261ffff16141515610179576001905061017e565b600090505b919050565b3373ffffffffffffffffffffffffffffffffffffffff166101a26102ec565b73ffffffffffffffffffffffffffffffffffffffff1614151561022d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff166103346102ec565b73ffffffffffffffffffffffffffffffffffffffff161415156103bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561048a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820e234149c8d4b3ae9a25ef67581c56ffd761aba1a53f824901074418f98988f1d0029";
        Long initBalance = ToBaseUnit.ToUGas("0.01");
        BIFContractCreateRequest request = new BIFContractCreateRequest();
        request.setSenderAddress(senderAddress);
        request.setPrivateKey(senderPrivateKey);
        request.setInitBalance(initBalance);
        request.setPayload(byteCode);
        request.setRemarks("create contract");
        request.setType(1);
        request.setFeeLimit(2000000000L);
//        request.setDomainId(20);
//        request.setGasPrice(100L);

        // 调用bifContractCreate接口
        BIFContractCreateResponse response = sdk.getBIFContractService().contractCreate(request);
        if (response.getErrorCode() == 0) {
            System.out.println(JsonUtils.toJSONString(response.getResult()));
        } else {
            System.out.println(JsonUtils.toJSONString(response));
        }
    }

    @Test
    public void testUint16TypeV2() {
        Long amount = 0L;
        String input = StrUtil.format(
                ADD_INT,
                1
        );
        BIFContractInvokeRequest request = new BIFContractInvokeRequest();
        request.setSenderAddress(senderAddress);
        request.setPrivateKey(senderPrivateKey);
        request.setContractAddress(testTypeAddress);
        request.setBIFAmount(amount);
        request.setRemarks("contract invoke");
        request.setDomainId(0);
        request.setInput(input);
        request.setGasPrice(1L);
        request.setFeeLimit(1000L);

        // invoke Transaction
        BIFContractInvokeResponse response = sdk.getBIFContractService().contractInvoke(request);
        if (response.getErrorCode() == 0) {
            System.out.println(JsonUtils.toJSONString(response.getResult()));
        } else {
            System.out.println(JsonUtils.toJSONString(response));
        }
    }
}
